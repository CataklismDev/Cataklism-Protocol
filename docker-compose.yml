version: '3.8'

services:
  # Frontend - Next.js application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    depends_on:
      - backend
    networks:
      - cataklism-network

  # Backend API - Node.js/TypeScript
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URI=mongodb://mongodb:27017/cataklism
      - REDIS_URL=redis://redis:6379
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
      - BSC_RPC_URL=${BSC_RPC_URL}
      - ARBITRUM_RPC_URL=${ARBITRUM_RPC_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - CATAKLISM_TOKEN_ADDRESS=${CATAKLISM_TOKEN_ADDRESS}
      - CATAKLISM_CORE_ADDRESS=${CATAKLISM_CORE_ADDRESS}
      - CATAKLISM_VAULT_ADDRESS=${CATAKLISM_VAULT_ADDRESS}
    volumes:
      - ./backend/src:/app/src
    depends_on:
      - mongodb
      - redis
    networks:
      - cataklism-network

  # Database - MongoDB
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=cataklism
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - cataklism-network

  # Cache - Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - cataklism-network

  # Blockchain - Local Hardhat node
  hardhat:
    build:
      context: .
      dockerfile: Dockerfile.hardhat
    ports:
      - "8545:8545"
    environment:
      - NETWORK=localhost
    volumes:
      - ./contracts:/app/contracts
      - ./scripts:/app/scripts
      - ./hardhat.config.js:/app/hardhat.config.js
    networks:
      - cataklism-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cataklism-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - cataklism-network

  # Analytics - Python monitoring service
  monitor:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/cataklism_analytics
      - REDIS_URL=redis://redis:6379
      - API_BASE_URL=http://backend:3001
    volumes:
      - ./monitoring:/app
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - cataklism-network

  # Analytics Database - PostgreSQL
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=cataklism_analytics
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - cataklism-network

  # IPFS for metadata storage
  ipfs:
    image: ipfs/go-ipfs:latest
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - cataklism-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - cataklism-network

volumes:
  mongodb_data:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  ipfs_data:

networks:
  cataklism-network:
    driver: bridge
